// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render with auto tab displayed 1`] = `
<Fragment>
  <Helmet
    defer={false}
    encodeSpecialCharacters={true}
    title="onboarding.create_organization.page.header"
    titleTemplate="%s"
  />
  <div
    className="page page-limited huge-spacer-top huge-spacer-bottom"
  >
    <A11ySkipTarget
      anchor="create_org_main"
    />
    <header
      className="page-header huge-spacer-bottom"
    >
      <h1
        className="page-title huge big-spacer-bottom"
      >
        <strong>
          onboarding.create_organization.page.header
        </strong>
      </h1>
      <p
        className="page-description"
      >
        onboarding.create_organization.page.description
      </p>
    </header>
    <Tabs
      onChange={[Function]}
      selected="auto"
      tabs={
        Array [
          Object {
            "key": "auto",
            "node": "onboarding.import_organization.import_from_x.github",
          },
          Object {
            "key": "manual",
            "node": "onboarding.create_organization.create_manually",
          },
        ]
      }
    />
    <ManualOrganizationCreate
      className="hidden"
      createOrganization={[MockFunction]}
      handleOrgDetailsFinish={[Function]}
      handleOrgDetailsStepOpen={[Function]}
      onDone={[Function]}
      onUpgradeFail={[Function]}
      step={0}
      subscriptionPlans={
        Array [
          Object {
            "maxNcloc": 100000,
            "price": 10,
          },
          Object {
            "maxNcloc": 250000,
            "price": 75,
          },
        ]
      }
    />
    <withRouter(RemoteOrganizationChoose)
      almApplication={
        Object {
          "backgroundColor": "blue",
          "iconPath": "icon/path",
          "installationUrl": "https://alm.installation.url",
          "key": "github",
          "name": "GitHub",
        }
      }
      almUnboundApplications={Array []}
      className=""
    />
  </div>
</Fragment>
`;

exports[`should render with auto tab selected and manual disabled 1`] = `
<AlmApplicationInstalling
  almKey="github"
/>
`;

exports[`should render with auto tab selected and manual disabled 2`] = `
<Fragment>
  <Helmet
    defer={false}
    encodeSpecialCharacters={true}
    title="onboarding.create_organization.page.header"
    titleTemplate="%s"
  />
  <div
    className="page page-limited huge-spacer-top huge-spacer-bottom"
  >
    <A11ySkipTarget
      anchor="create_org_main"
    />
    <header
      className="page-header huge-spacer-bottom"
    >
      <h1
        className="page-title huge big-spacer-bottom"
      >
        <strong>
          onboarding.create_organization.page.header
        </strong>
      </h1>
      <p
        className="page-description"
      >
        onboarding.create_organization.page.description
      </p>
    </header>
    <Tabs
      onChange={[Function]}
      selected="auto"
      tabs={
        Array [
          Object {
            "key": "auto",
            "node": "onboarding.import_organization.import_from_x.github",
          },
          Object {
            "key": "manual",
            "node": "onboarding.create_organization.create_manually",
          },
        ]
      }
    />
    <ManualOrganizationCreate
      className="hidden"
      createOrganization={[MockFunction]}
      handleOrgDetailsFinish={[Function]}
      handleOrgDetailsStepOpen={[Function]}
      onDone={[Function]}
      onUpgradeFail={[Function]}
      step={0}
      subscriptionPlans={
        Array [
          Object {
            "maxNcloc": 100000,
            "price": 10,
          },
          Object {
            "maxNcloc": 250000,
            "price": 75,
          },
        ]
      }
    />
    <AutoOrganizationCreate
      almApplication={
        Object {
          "backgroundColor": "blue",
          "iconPath": "icon/path",
          "installationUrl": "https://alm.installation.url",
          "key": "github",
          "name": "GitHub",
        }
      }
      almInstallId="foo"
      almOrganization={
        Object {
          "avatar": "my-avatar",
          "description": "Continuous Code Quality",
          "key": "sonarsource",
          "name": "SonarSource",
          "privateRepos": 0,
          "publicRepos": 3,
          "url": "https://www.sonarsource.com",
        }
      }
      className=""
      createOrganization={[MockFunction]}
      handleCancelImport={[Function]}
      handleOrgDetailsFinish={[Function]}
      handleOrgDetailsStepOpen={[Function]}
      onDone={[Function]}
      onOrgCreated={[Function]}
      onUpgradeFail={[Function]}
      step={0}
      subscriptionPlans={
        Array [
          Object {
            "maxNcloc": 100000,
            "price": 10,
          },
          Object {
            "maxNcloc": 250000,
            "price": 75,
          },
        ]
      }
      unboundOrganizations={
        Array [
          Object {
            "actions": Object {
              "admin": true,
            },
            "key": "foo",
            "name": "Foo",
          },
        ]
      }
    />
  </div>
</Fragment>
`;

exports[`should render with manual tab displayed 1`] = `
<Fragment>
  <Helmet
    defer={false}
    encodeSpecialCharacters={true}
    title="onboarding.create_organization.page.header"
    titleTemplate="%s"
  />
  <div
    className="page page-limited huge-spacer-top huge-spacer-bottom"
  >
    <A11ySkipTarget
      anchor="create_org_main"
    />
    <header
      className="page-header huge-spacer-bottom"
    >
      <h1
        className="page-title huge big-spacer-bottom"
      >
        <strong>
          onboarding.create_organization.page.header
        </strong>
      </h1>
      <p
        className="page-description"
      >
        onboarding.create_organization.page.description
      </p>
    </header>
    <ManualOrganizationCreate
      createOrganization={[MockFunction]}
      handleOrgDetailsFinish={[Function]}
      handleOrgDetailsStepOpen={[Function]}
      onDone={[Function]}
      onUpgradeFail={[Function]}
      step={0}
      subscriptionPlans={
        Array [
          Object {
            "maxNcloc": 100000,
            "price": 10,
          },
          Object {
            "maxNcloc": 250000,
            "price": 75,
          },
        ]
      }
    />
  </div>
</Fragment>
`;

exports[`should render with organization bind page 1`] = `
<AlmApplicationInstalling
  almKey="github"
/>
`;

exports[`should render with organization bind page 2`] = `
<Fragment>
  <Helmet
    defer={false}
    encodeSpecialCharacters={true}
    title="onboarding.create_organization.page.header"
    titleTemplate="%s"
  />
  <div
    className="page page-limited huge-spacer-top huge-spacer-bottom"
  >
    <A11ySkipTarget
      anchor="create_org_main"
    />
    <header
      className="page-header huge-spacer-bottom"
    >
      <h1
        className="page-title huge big-spacer-bottom"
      >
        <strong>
          onboarding.create_organization.page.header
        </strong>
      </h1>
      <p
        className="page-description"
      >
        onboarding.create_organization.page.description
      </p>
    </header>
    <Tabs
      onChange={[Function]}
      selected="auto"
      tabs={
        Array [
          Object {
            "key": "auto",
            "node": "onboarding.import_organization.import_from_x.github",
          },
          Object {
            "key": "manual",
            "node": "onboarding.create_organization.create_manually",
          },
        ]
      }
    />
    <ManualOrganizationCreate
      className="hidden"
      createOrganization={[MockFunction]}
      handleOrgDetailsFinish={[Function]}
      handleOrgDetailsStepOpen={[Function]}
      onDone={[Function]}
      onUpgradeFail={[Function]}
      step={0}
      subscriptionPlans={
        Array [
          Object {
            "maxNcloc": 100000,
            "price": 10,
          },
          Object {
            "maxNcloc": 250000,
            "price": 75,
          },
        ]
      }
    />
    <AutoOrganizationCreate
      almApplication={
        Object {
          "backgroundColor": "blue",
          "iconPath": "icon/path",
          "installationUrl": "https://alm.installation.url",
          "key": "github",
          "name": "GitHub",
        }
      }
      almInstallId="foo"
      almOrganization={
        Object {
          "almUrl": "https://github.com/foo",
          "avatar": "http://example.com/avatar",
          "description": "description-foo",
          "key": "foo",
          "name": "foo",
          "personal": false,
          "privateRepos": 0,
          "publicRepos": 3,
          "url": "http://example.com/foo",
        }
      }
      className=""
      createOrganization={[MockFunction]}
      handleCancelImport={[Function]}
      handleOrgDetailsFinish={[Function]}
      handleOrgDetailsStepOpen={[Function]}
      onDone={[Function]}
      onOrgCreated={[Function]}
      onUpgradeFail={[Function]}
      step={0}
      subscriptionPlans={
        Array [
          Object {
            "maxNcloc": 100000,
            "price": 10,
          },
          Object {
            "maxNcloc": 250000,
            "price": 75,
          },
        ]
      }
      unboundOrganizations={
        Array [
          Object {
            "actions": Object {
              "admin": true,
            },
            "key": "foo",
            "name": "Foo",
          },
        ]
      }
    />
  </div>
</Fragment>
`;

exports[`should switch tabs 1`] = `
<Fragment>
  <Helmet
    defer={false}
    encodeSpecialCharacters={true}
    title="onboarding.create_organization.page.header"
    titleTemplate="%s"
  />
  <div
    className="page page-limited huge-spacer-top huge-spacer-bottom"
  >
    <A11ySkipTarget
      anchor="create_org_main"
    />
    <header
      className="page-header huge-spacer-bottom"
    >
      <h1
        className="page-title huge big-spacer-bottom"
      >
        <strong>
          onboarding.create_organization.page.header
        </strong>
      </h1>
      <p
        className="page-description"
      >
        onboarding.create_organization.page.description
      </p>
    </header>
    <Tabs
      onChange={[Function]}
      selected="auto"
      tabs={
        Array [
          Object {
            "key": "auto",
            "node": "onboarding.import_organization.import_from_x.github",
          },
          Object {
            "key": "manual",
            "node": "onboarding.create_organization.create_manually",
          },
        ]
      }
    />
    <ManualOrganizationCreate
      className="hidden"
      createOrganization={[MockFunction]}
      handleOrgDetailsFinish={[Function]}
      handleOrgDetailsStepOpen={[Function]}
      onDone={[Function]}
      onUpgradeFail={[Function]}
      step={0}
      subscriptionPlans={
        Array [
          Object {
            "maxNcloc": 100000,
            "price": 10,
          },
          Object {
            "maxNcloc": 250000,
            "price": 75,
          },
        ]
      }
    />
    <withRouter(RemoteOrganizationChoose)
      almApplication={
        Object {
          "backgroundColor": "blue",
          "iconPath": "icon/path",
          "installationUrl": "https://alm.installation.url",
          "key": "github",
          "name": "GitHub",
        }
      }
      almUnboundApplications={Array []}
      className=""
    />
  </div>
</Fragment>
`;
