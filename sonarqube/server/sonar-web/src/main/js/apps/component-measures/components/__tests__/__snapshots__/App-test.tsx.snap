// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should not render drilldown for estimated duplications 1`] = `
<div
  id="component-measures"
>
  <Suggestions
    suggestions="component_measures"
  />
  <Helmet
    defer={false}
    encodeSpecialCharacters={true}
    title="Coverage"
  />
  <div
    className="layout-page"
  >
    <ScreenPositionHelper
      className="layout-page-side-outer"
    >
      <Component />
    </ScreenPositionHelper>
    <div
      className="layout-page-main"
    >
      <div
        className="layout-page-main-inner"
      >
        <div
          className="note"
        >
          component_measures.details_are_not_available
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`should render a message when there are no measures 1`] = `
<div
  id="component-measures"
>
  <Suggestions
    suggestions="component_measures"
  />
  <Helmet
    defer={false}
    encodeSpecialCharacters={true}
    title="Coverage"
  />
  <MeasuresEmpty />
</div>
`;

exports[`should render correctly 1`] = `
<div
  id="component-measures"
>
  <Suggestions
    suggestions="component_measures"
  />
  <Helmet
    defer={false}
    encodeSpecialCharacters={true}
    title="Coverage"
  />
  <div
    className="layout-page"
  >
    <ScreenPositionHelper
      className="layout-page-side-outer"
    >
      <Component />
    </ScreenPositionHelper>
    <MeasureContent
      branchLike={
        Object {
          "analysisDate": "2018-01-01",
          "excludedFromPurge": true,
          "isMain": true,
          "name": "master",
        }
      }
      metrics={
        Object {
          "coverage": Object {
            "domain": "Coverage",
            "id": "2",
            "key": "coverage",
            "name": "Coverage",
            "type": "PERCENT",
          },
          "duplicated_lines_density": Object {
            "domain": "Duplications",
            "id": "3",
            "key": "duplicated_lines_density",
            "name": "Duplicated Lines (%)",
            "type": "PERCENT",
          },
          "lines_to_cover": Object {
            "domain": "Coverage",
            "id": "1",
            "key": "lines_to_cover",
            "name": "Lines to Cover",
            "type": "INT",
          },
          "new_bugs": Object {
            "domain": "Reliability",
            "id": "4",
            "key": "new_bugs",
            "name": "New Bugs",
            "type": "INT",
          },
        }
      }
      onIssueChange={[Function]}
      requestedMetric={
        Object {
          "domain": "Coverage",
          "id": "2",
          "key": "coverage",
          "name": "Coverage",
          "type": "PERCENT",
        }
      }
      rootComponent={
        Object {
          "breadcrumbs": Array [],
          "key": "foo",
          "name": "Foo",
          "organization": "foo",
          "qualifier": "TRK",
          "qualityGate": Object {
            "isDefault": true,
            "key": "30",
            "name": "Sonar way",
          },
          "qualityProfiles": Array [
            Object {
              "deleted": false,
              "key": "my-qp",
              "language": "ts",
              "name": "Sonar way",
            },
          ],
          "tags": Array [],
        }
      }
      router={
        Object {
          "createHref": [MockFunction],
          "createPath": [MockFunction],
          "go": [MockFunction],
          "goBack": [MockFunction],
          "goForward": [MockFunction],
          "isActive": [MockFunction],
          "push": [MockFunction],
          "replace": [MockFunction],
          "setRouteLeaveHook": [MockFunction],
        }
      }
      selected=""
      updateQuery={[Function]}
      view="tree"
    />
  </div>
</div>
`;
