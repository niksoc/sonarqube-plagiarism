<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.property.PropertiesMapper">

  <select id="findUsersForNotification" parameterType="map" resultType="org.sonar.db.property.Subscriber">
    SELECT
      u.login as "login",
      ${_true} as "global"
    FROM
      users u
    INNER JOIN properties p ON p.user_id = u.id
    WHERE
      p.prop_key = #{notifKey,jdbcType=VARCHAR}
      AND p.text_value = 'true'
      AND p.resource_id IS NULL

    <if test="projectKey != null">
      UNION

      SELECT
        u.login as "login",
        ${_false} as "global"
      FROM
        users u
      INNER JOIN components c on c.kee = #{projectKey,jdbcType=VARCHAR}
      INNER JOIN properties p ON p.user_id = u.id
      WHERE
        p.prop_key = #{notifKey,jdbcType=VARCHAR}
        AND p.text_value = 'true'
        AND p.resource_id = c.id
    </if>
  </select>

  <select id="findEmailRecipientsForNotification" parameterType="map" resultType="org.sonar.db.EmailSubscriberDto">
    SELECT
      u.login as "login",
      ${_true} as "global",
      u.email as "email"
    FROM
      users u
    INNER JOIN properties p ON
      p.user_id = u.id
      and p.prop_key = #{notifKey,jdbcType=VARCHAR}
      and p.text_value = 'true'
      and p.resource_id IS NULL
    WHERE
      u.email is not null
      <if test="logins != null">
        and u.login in <foreach collection="logins" open="(" close=")" item="login" separator=",">#{login,jdbcType=VARCHAR}</foreach>
      </if>

    <if test="projectKey != null">
      UNION

      SELECT
        u.login as "login",
        ${_false} as "global",
        u.email as "email"
      FROM
        users u
      INNER JOIN components c on
        c.kee = #{projectKey,jdbcType=VARCHAR}
      INNER JOIN properties p ON
        p.user_id = u.id
        and p.prop_key = #{notifKey,jdbcType=VARCHAR}
        and p.text_value = 'true'
        and p.resource_id = c.id
      WHERE
        u.email is not null
        <if test="logins != null">
          and u.login in <foreach collection="logins" open="(" close=")" item="login" separator=",">#{login,jdbcType=VARCHAR}</foreach>
        </if>
    </if>

  </select>

  <sql id="columnsToScrapPropertyDto">
    p.prop_key as "key",
    p.is_empty as empty,
    p.text_value as textValue,
    p.clob_value as clobValue,
    p.resource_id as resourceId,
    p.user_id as userId
  </sql>

  <select id="selectGlobalProperties" resultType="ScrapProperty">
    select
      <include refid="columnsToScrapPropertyDto"/>
    from
      properties p
    where
      p.resource_id is null
      and p.user_id is null
  </select>

  <select id="selectProjectProperties" parameterType="String" resultType="ScrapProperty">
    select
      <include refid="columnsToScrapPropertyDto"/>
    from
      properties p,
      components r
    where
      p.resource_id=r.id
      and p.user_id is null
      and r.kee=#{resourceKey,jdbcType=VARCHAR}
  </select>

  <select id="selectByKey" parameterType="map" resultType="ScrapProperty">
    select
      <include refid="columnsToScrapPropertyDto"/>
    from
      properties p
    where
      p.prop_key=#{key}
      <if test="resourceId == null">
        and p.resource_id is null
      </if>
      <if test="resourceId != null">
        and p.resource_id=#{resourceId}
      </if>
      <if test="userId == null">
        and p.user_id is null
      </if>
      <if test="userId != null">
        and p.user_id=#{userId,jdbcType=INTEGER}
      </if>
  </select>

  <select id="selectByKeys" parameterType="map" resultType="ScrapProperty">
    select
      <include refid="columnsToScrapPropertyDto"/>
    from
      properties p
    where
      p.prop_key in
        <foreach collection="keys" open="(" close=")" item="key" separator=",">
          #{key}
        </foreach>
      and p.resource_id is null
      and p.user_id is null
    order by p.created_at
  </select>

  <select id="selectByKeysAndComponentIds" parameterType="map" resultType="ScrapProperty">
    select
      <include refid="columnsToScrapPropertyDto"/>
    from
      properties p
    where
      p.prop_key in
        <foreach collection="keys" open="(" close=")" item="key" separator=",">
          #{key}
        </foreach>
      and p.resource_id in
        <foreach collection="componentIds" open="(" close=")" item="componentId" separator=",">
          #{componentId}
        </foreach>
      and p.user_id is null
  </select>

  <select id="selectByComponentIds" parameterType="map" resultType="ScrapProperty">
    select
      <include refid="columnsToScrapPropertyDto"/>
    from
      properties p
    where
      p.resource_id in
      <foreach collection="componentIds" open="(" close=")" item="componentId" separator=",">
        #{componentId}
      </foreach>
      and p.user_id is null
  </select>

  <select id="selectByKeyAndUserIdAndComponentQualifier" parameterType="map" resultType="ScrapProperty">
    select
    <include refid="columnsToScrapPropertyDto"/>
    from
    properties p
      inner join components prj on prj.id=p.resource_id and prj.qualifier = #{qualifier, jdbcType=VARCHAR}
    where
      p.prop_key = #{key, jdbcType=VARCHAR}
      and p.user_id = #{userId, jdbcType=INTEGER}
  </select>

  <select id="selectByQuery" parameterType="map" resultType="ScrapProperty">
    select
      <include refid="columnsToScrapPropertyDto"/>
    from
      properties p
    <where>
      <if test="query.key() != null">
        and p.prop_key=#{query.key,jdbcType=VARCHAR}
      </if>
      <if test="query.componentId() != null">
        and p.resource_id=#{query.componentId,jdbcType=BIGINT}
      </if>
      <if test="query.userId() != null">
        and p.user_id=#{query.userId,jdbcType=INTEGER}
      </if>
    </where>
  </select>

  <select id="selectIdsByOrganizationAndUser" parameterType="map" resultType="long">
    select py.id
    from properties py
      inner join components ps on py.resource_id = ps.id
    where
    py.user_id=#{userId,jdbcType=INTEGER}
    and ps.organization_uuid=#{organizationUuid,jdbcType=VARCHAR}
  </select>

  <select id="selectIdsByOrganizationAndMatchingLogin" parameterType="String" resultType="long">
    select py.id
    from properties py
      inner join components ps on py.resource_id = ps.id
    where
    py.text_value like #{login,jdbcType=VARCHAR}
    and py.prop_key in
    <foreach item="property" index="index" collection="propertyKeys" open="(" separator="," close=")">
      #{property,jdbcType=VARCHAR}
    </foreach>
    and ps.organization_uuid=#{organizationUuid,jdbcType=VARCHAR}
  </select>

  <select id="selectByKeyAndMatchingValue" parameterType="map" resultType="ScrapProperty">
    select
      <include refid="columnsToScrapPropertyDto"/>
    from properties p
    <where>
      p.prop_key = #{key,jdbcType=VARCHAR}
      and p.text_value like #{value,jdbcType=VARCHAR}
    </where>
  </select>

  <insert id="insertAsEmpty" parameterType="Map" useGeneratedKeys="false">
    insert into properties
    (
      prop_key,
      resource_id,
      user_id,
      is_empty,
      created_at
    )
    values (
      #{key},
      #{componentId},
      #{userId,jdbcType=INTEGER},
      ${_true},
      #{now}
    )
  </insert>

  <insert id="insertAsText" parameterType="Map" useGeneratedKeys="false">
    insert into properties
    (
      prop_key,
      resource_id,
      user_id,
      is_empty,
      text_value,
      created_at
    )
    values (
      #{key},
      #{componentId},
      #{userId,jdbcType=INTEGER},
      ${_false},
      #{value},
      #{now}
    )
  </insert>

  <insert id="insertAsClob" parameterType="Map" useGeneratedKeys="false">
   insert into properties
    (
      prop_key,
      resource_id,
      user_id,
      is_empty,
      clob_value,
      created_at
    )
    values (
      #{key},
      #{componentId},
      #{userId,jdbcType=INTEGER},
      ${_false},
      #{value},
      #{now}
    )
  </insert>

  <delete id="delete" parameterType="map">
    delete from properties
    where
      prop_key=#{key}
    <choose>
      <when test="componentId != null &amp;&amp; userId != null">
        and resource_id=#{componentId}
        and user_id=#{userId,jdbcType=INTEGER}
      </when>
      <when test="componentId != null">
        and resource_id=#{componentId}
        and user_id is null
      </when>
      <when test="userId != null">
        and resource_id is null
        and user_id=#{userId,jdbcType=INTEGER}
      </when>
      <otherwise>
        and resource_id is null
        and user_id is null
      </otherwise>
    </choose>
  </delete>

  <delete id="deleteProjectProperty" parameterType="map">
    delete from properties
    where
      prop_key=#{key}
      and resource_id=#{rId}
      and user_id is null
  </delete>

  <delete id="deleteProjectProperties" parameterType="map">
    delete from properties
    where
      prop_key=#{key}
      and text_value = #{value}
      and resource_id is not null
      and user_id is null
  </delete>

  <delete id="deleteGlobalProperty" parameterType="string">
    delete from properties
    where
      prop_key=#{key}
      and resource_id is null
      and user_id is null
  </delete>

  <delete id="deleteGlobalProperties">
    delete from properties
    where
      resource_id is null
      and user_id is null
  </delete>

  <delete id="deleteByQuery">
    delete from properties
    <where>
      <if test="query.key() != null">
        and prop_key=#{query.key,jdbcType=VARCHAR}
      </if>
      <if test="query.componentId() != null">
        and resource_id=#{query.componentId,jdbcType=BIGINT}
      </if>
      <if test="query.userId() != null">
        and user_id=#{query.userId,jdbcType=INTEGER}
      </if>
    </where>
  </delete>

  <delete id="deleteByKeyAndValue" parameterType="map">
    DELETE FROM properties
    <where>
      AND prop_key = #{key,jdbcType=VARCHAR}
      AND text_value LIKE #{value,jdbcType=VARCHAR}
    </where>
  </delete>

  <delete id="deleteByIds" parameterType="long">
    delete from properties
    where
    id in
    <foreach collection="ids" open="(" close=")" item="id" separator=",">
      #{id}
    </foreach>
  </delete>

  <update id="renamePropertyKey" parameterType="map">
    update properties set
      prop_key=#{newKey}
    where
      prop_key=#{oldKey}
  </update>

</mapper>
